shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/clValid2.R')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
?mixmodCluster
d <- mixmodCluster(geyser, nbCluster=2:6)
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
?for
{}
?for()
??for()
??for
{}
??for{}
help(for)
help('for')
?apply
?sapply
(a2 <- sapply(v, f2, y = 2*(1:5), simplify = "array"))
f2 <- function(x, y) outer(rep(x, length.out = 3), y)
(a2 <- sapply(v, f2, y = 2*(1:5), simplify = "array"))
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
sapply(x, quantile)
?lapplyh
?lapply
help('for')
for(i in 1:5) print(1:i)
for(n in c(2,5,10,20,50)) {
x <- stats::rnorm(n)
cat(n, ": ", sum(x^2), "\n", sep = "")
}
f <- factor(sample(letters[1:5], 10, replace = TRUE))
for(i in unique(f)) print(i)
?cbind
m <- cbind(1, 1:7) # the '1' (= shorter vector) is recycled
m
m <- cbind(m, 8:14)[, c(1, 3, 2)] # insert a column
m
m <- cbind(1, 1:7) # the '1' (= shorter vector) is recycled
m
m <- rbind(m, 8:14)[, c(1, 3)] # insert a column
m
dim(m)
rbind(m,m)
?merge
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
(m2 <- merge(books, authors, by.x = "name", by.y = "surname"))
shiny::runApp('C:/Users/j.straube/ownCloud/Australia')
shiny::runApp('C:/Users/j.straube/ownCloud/Australia')
categories.disease <- function(x){
symptoms <- c('fevers','infections','cough','rash','headache','puss')
drugs <- c('antibiotics','Sulfonamides','Penicillin','Streptomycin','Chloramphenicol', 'Tetracycline', 'Erythromycin', 'Vancomycin','Ampicillin', 'Methicillin','Cephalosporins','Linezolid','Daptomycin')
bugs <- c('E.coli','MRSA','staphylococcus','Legionella pneumophila')
if(length(grep(x,drugs))>0)
cat <- 'Drug'
if(length(grep(x,bugs))>0)
cat <- 'Bug'
if(length(grep(x,symptoms))>0)
cat <- 'Symptom'
cat
}
shiny::runApp('C:/Users/j.straube/ownCloud/Australia')
shiny::runApp('C:/Users/j.straube/ownCloud/Australia')
?gray
rainbow(10, start = .85, end = .1)
shiny::runApp('C:/Users/j.straube/ownCloud/Australia')
shiny::runApp('C:/Users/j.straube/ownCloud/Australia')
shiny::runApp('C:/Users/j.straube/ownCloud/Australia')
shiny::runApp('C:/Users/j.straube/ownCloud/Australia')
shiny::runApp('C:/Users/j.straube/ownCloud/Australia')
length(c())
shiny::runApp('C:/Users/j.straube/ownCloud/Australia')
shiny::runApp('C:/Users/j.straube/ownCloud/Australia')
shiny::runApp('C:/Users/j.straube/ownCloud/Australia')
shiny::runApp('C:/Users/j.straube/ownCloud/Australia')
?help
for(i in 1:5)print(i)
for(x in 1:5)print(x)
let <- rep(letters[1:5],10)
for(x in let)print(x)
p <-''
for(i in let){
p <- paste(p,i, sep = ',')
print(p)
}
?sum
sum(c(1:5))
sum(c(1:5,NA))
sum(c(1:5,NA),na.rm=T)
sum(1:5)
?appply
?apply
m <- matrix(rnorm(100,1,2),ncol=25)
dim(m)
View(m)
apply(m,1,mean)
apply(m,2,mean)
for(i in 1:ncol(m)){
print(mean(m[,i]))
}
for(i in 1:nrow(m)){
print(mean(m[i,]))
}
m[1,]
m[,1]
m[1,1]
m[1,1:2]
source('C:/Users/j.straube/Desktop/Dropbox/lmms/R/lmmSpline-method.R')
source('C:/Users/j.straube/Desktop/Dropbox/lmms/R/lmmSpline-method.R')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
var <- switch("km",
"hc"="Hierarchical Clustering",
"diana"  =  "Diana" ,
"km"="Kmeans" ,
'model'= 'Model based clustering',
'som'='Self-Organizing maps')
var
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
?titlePanel
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/uiNavbar.R')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
?qplot
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
GroupData()$data
GroupData
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
?"lmmSpline"
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
library(lmms)
?lmmSpline
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLMMSpline<- lmmSpline(data=kidneySimTimeGroup$data[G1,],time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1])
summary(testLMMSpline)
DerivTestLMMSplineTG<- lmmSpline(data=as.data.frame(kidneySimTimeGroup$data[G1,]),
time=kidneySimTimeGroup$time[G1],sampleID=kidneySimTimeGroup$sampleID[G1],
deri=TRUE,basis="p-spline")
summary(DerivTestLMMSplineTG)
is.data.frame(kidneySimTimeGroup$data[G1,])
is.matrix(kidneySimTimeGroup$data[G1,])
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/lmmSpline.R')
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLMMSpline<- lmmSpline(data=kidneySimTimeGroup$data[G1,],time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1])
summary(testLMMSpline)
DerivTestLMMSplineTG<- lmmSpline(data=as.data.frame(kidneySimTimeGroup$data[G1,]),
time=kidneySimTimeGroup$time[G1],sampleID=kidneySimTimeGroup$sampleID[G1],
deri=TRUE,basis="p-spline")
summary(DerivTestLMMSplineTG)
rm(lmmSpline)
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/lmmSpline.R')
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLMMSpline<- lmmSpline(data=kidneySimTimeGroup$data[G1,],time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1])
summary(testLMMSpline)
DerivTestLMMSplineTG<- lmmSpline(data=as.data.frame(kidneySimTimeGroup$data[G1,]),
time=kidneySimTimeGroup$time[G1],sampleID=kidneySimTimeGroup$sampleID[G1],
deri=TRUE,basis="p-spline")
summary(DerivTestLMMSplineTG)
source('C:/Users/j.straube/Desktop/Dropbox/lmms/R/lmmSpline-method.R')
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLMMSpline<- lmmSpline(data=kidneySimTimeGroup$data[G1,],time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1])
summary(testLMMSpline)
head(other.reshape(kidneySimTimeGroup$sampleID[G1],kidneySimTimeGroup$time[G1],kidneySimTimeGroup$data[G1,]))
library("lmms", lib.loc="~/R/win-library/3.2")
detach("package:lmms", unload=TRUE)
rm(lmmSpline)
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/lmmSpline.R')
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLMMSpline<- lmmSpline(data=kidneySimTimeGroup$data[G1,],time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1])
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/lmmSpline.R')
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLMMSpline<- lmmSpline(data=kidneySimTimeGroup$data[G1,],time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1])
table(testLMMSpline$modelsUsed)
source('C:/Users/j.straube/Desktop/Dropbox/lmms/R/lmmSpline-method.R')
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLMMSpline<- lmmSpline(data=kidneySimTimeGroup$data[G1,],time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1])
source('C:/Users/j.straube/Desktop/Dropbox/lmms/R/lmmSpline-method.R')
?ssetClass
?setClassUnion
setGeneric('lmmSpline',function(data,time,sampleID,timePredict,deri,basis,knots,keepModels,numCores){standardGeneric('lmmSpline')})
setClassUnion("matrixOrFrame",c('matrix','data.frame'))
setClassUnion("missingOrnumeric", c("missing", "numeric"))
setClassUnion("missingOrcharacter", c("missing", "character"))
setClassUnion("missingOrlogical", c("missing", "logical"))
setClassUnion("factorOrcharacterOrnumeric", c("factor", "character","numeric"))
?setClassUnion
setClass("withId", representation("maybeNumber", id = "character"))
setClassUnion("maybeNumber", c("numeric", "logical"))
setClassUnion("missingOrNULL", c("missing", "NULL"))
setClassUnion("missingOrNumeric", c("missing", "numeric"))
setClassUnion("missingOrNumeric", c("numeric","missing"))
setClassUnion("OptionalNumeric", c("numeric","missing"))
source('C:/Users/j.straube/Desktop/Dropbox/lmms/R/lmmSpline-method.R')
require(roxygen2)
roxygenize('../Desktop/Dropbox/lmms/')
require(roxygen2)
roxygenize('../Desktop/Dropbox/lmms/')
source('C:/Users/j.straube/Desktop/Dropbox/lmms/R/investNoise-method.R')
roxygenize('../Desktop/Dropbox/lmms/')
roxygenize('../Desktop/Dropbox/lmms/')
require(roxygen2)
roxygenize('../Desktop/Dropbox/lmms/')
roxygenize('../Desktop/Dropbox/lmms/')
roxygenize('../Desktop/Dropbox/lmms/')
summary(DerivTestLMMSplineTG)}
roxygenize('../Desktop/Dropbox/lmms/')
roxygenize('../Desktop/Dropbox/lmms/')
roxygenize('../Desktop/Dropbox/lmms/')
require(roxygen2)
roxygenize('../Desktop/Dropbox/lmms/')
roxygenize('../Desktop/Dropbox/lmms/')
roxygenize('../Desktop/Dropbox/lmms/')
install.packages('../Desktop/Dropbox/lmmPackage/lmmAugust/lmms.zip')
install.packages('../Desktop/Dropbox/lmmPackage/lmmAugust/lmms.zip',repos = NULL,type='source')
library(lmms)
?lmmSpline
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLMMSpline<- lmmSpline(data=kidneySimTimeGroup$data[G1,],time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1])
summary(testLMMSpline)
DerivTestLMMSplineTG<- lmmSpline(data=as.data.frame(kidneySimTimeGroup$data[G1,]),
time=kidneySimTimeGroup$time[G1],sampleID=kidneySimTimeGroup$sampleID[G1],
deri=TRUE,basis="p-spline")
summary(DerivTestLMMSplineTG)
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
require(lmms)
?lmms
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLmmspline <- lmmSpline(data=kidneySimTimeGroup$data[G1,],
time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1],keepModels=T)
plot(testLmmspline, y=2)
plot(testLmmspline, y=2, smooth=TRUE)
# Don't keep the models to improve memory
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLmmspline <- lmmSpline(data=kidneySimTimeGroup$data[G1,],
time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1],keepModels=T)
plot(testLmmspline, y=2)
plot(testLmmspline, y=2, mean=TRUE)
# Don't keep the models to improve memory
lmm <<- lmmSpline(data=ExpData,sampleID=replicate, time=time, basis=isolate(input$BasisDE),keepModels = F)
data(kidneySimTimeGroup)
lmmsDEtestl1 <-lmmsDE(data=kidneySimTimeGroup$data,time=kidneySimTimeGroup$time,
sampleID=kidneySimTimeGroup$sampleID,
group=kidneySimTimeGroup$group,
experiment="longitudinal1",basis="p-spline",keepModels=T)
plot(lmmsDEtestl1,y=2,type="all")
plot(lmmsDEtestl1,y=2,type="time")
plot(lmmsDEtestl1,y=2,type="group")
plot(lmmsDEtestl1,y=2,type="group*time",smooth=TRUE)
data(kidneySimTimeGroup)
lmmsDEtestl1 <-lmmsDE(data=kidneySimTimeGroup$data,time=kidneySimTimeGroup$time,
sampleID=kidneySimTimeGroup$sampleID,
group=kidneySimTimeGroup$group,
experiment="longitudinal1",basis="p-spline",keepModels=T)
plot(lmmsDEtestl1,y=2,type="all")
plot(lmmsDEtestl1,y=2,type="time")
plot(lmmsDEtestl1,y=2,type="group")
plot(lmmsDEtestl1,y=2,type="group*time",smooth=F)
plot(lmmsDEtestl1,y=2,type="group*time",smooth=F,mean=F)
source('C:/Users/j.straube/Desktop/Dropbox/lmms/R/plot.lmmsde-method.R')
plot(lmmsDEtestl1,y=2,type="group*time",smooth=F,mean=F)
plot(lmmsDEtestl1,y=2,type="group*time",smooth=T,mean=F)
source('C:/Users/j.straube/Desktop/Dropbox/lmms/R/plot.lmmsde-method.R')
plot(lmmsDEtestl1,y=2,type="group*time",smooth=T,mean=F)
plot(lmmsDEtestl1,y=2,type="group*time",smooth=F,mean=F)
plot(lmmsDEtestl1,y=2,type="group*time",smooth=F,mean=T)
plot(lmmsDEtestl1,y=2,type="group*time",smooth=F,mean=F)
plot(testLmmspline, y=2, data=kidneySimTimeGroup$data[G1,], time=kidneySimTimeGroup$time[G1])
plot(testLmmspline, y=2, data=kidneySimTimeGroup$data[G1,], time=kidneySimTimeGroup$time[G1],smooth=T)
plot(testLmmspline, y=2, data=kidneySimTimeGroup$data[G1,], time=kidneySimTimeGroup$time[G1],mean=T)
plot(testLmmspline, y=2, data=kidneySimTimeGroup$data[G1,], time=kidneySimTimeGroup$time[G1],mean=T,smooth=T)
plot(lmmsDEtestl1,y=2,type="group*time",smooth=T,mean=T)
require(roxygen2)
roxygenize('../Desktop/Dropbox/lmms/')
install.packages('../Desktop/Dropbox/lmmPackage/lmmAugust/lmms.zip',repos=NULL,type='source')
require(lmms)
?"lmmSpline"
## Not run:
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLmmspline <- lmmSpline(data=kidneySimTimeGroup$data[G1,],
time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1],keepModels=T)
plot(testLmmspline, y=2)
plot(testLmmspline, y=2, smooth=TRUE)
# Don't keep the models to improve memory usage
testLmmspline <- lmmSpline(data=kidneySimTimeGroup$data[G1,],
time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1],keepModels=F)
#plot only the fitted values
plot(testLmmspline, y=2)
#plot fitted values with original data
plot(testLmmspline, y=2, data=kidneySimTimeGroup$data[G1,], time=kidneySimTimeGroup$time[G1])
install.packages('../Desktop/Dropbox/lmmPackage/lmmAugust/lmms.zip',repos=NULL,type='source')
library(lmms)
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLmmspline <- lmmSpline(data=kidneySimTimeGroup$data[G1,],
time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1],keepModels=T)
plot(testLmmspline, y=2)
plot(testLmmspline, y=2, smooth=TRUE)
?"lmmsDE"
data(kidneySimTimeGroup)
lmmsDEtestl1 <-lmmsDE(data=kidneySimTimeGroup$data,time=kidneySimTimeGroup$time,
sampleID=kidneySimTimeGroup$sampleID,
group=kidneySimTimeGroup$group,
experiment="longitudinal1",basis="p-spline",keepModels=T)
plot(lmmsDEtestl1,y=2,type="all")
plot(lmmsDEtestl1,y=2,type="time")
plot(lmmsDEtestl1,y=2,type="group")
plot(lmmsDEtestl1,y=2,type="group*time",smooth=TRUE)
#to save memory do not keep the models
lmmsDEtestl1 <-lmmsDE(data=kidneySimTimeGroup$data,time=kidneySimTimeGroup$time,
sampleID=kidneySimTimeGroup$sampleID,
group=kidneySimTimeGroup$group,
experiment="longitudinal1",basis="p-spline",keepModels=F)
# just the fitted trajectory
plot(lmmsDEtestl1,y=2,type="all")
plot(lmmsDEtestl1,y=2,type="all",data=kidneySimTimeGroup$data,time=kidneySimTimeGroup$time,
group=kidneySimTimeGroup$group)
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
collapse('b','c')
collapse(c('b','c'))
collapse(c('b','c'))
paste(c('b','c'))
paste(c('b','c'),collapse = '')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
require(GO.db)
require(annotate)
require(plyr)
library(AnnotationDbi)
??GO.db
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/BHI.R')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
library(Rmixmod)
?mixmodCluster
data(geyser)
## with default values
d <- mixmodCluster(geyser, nbCluster=2:6)
d@bestResult@partition
is.matrix(geyser)
is.data.frame(geyser)
?clara
x <- rbind(cbind(rnorm(200,0,8), rnorm(200,0,8)),
cbind(rnorm(300,50,8), rnorm(300,50,8)))
clarax <- clara(x, 2, samples=50)
clarax$clustering
d <- mixmodCluster(x, nbCluster=2:6)
d <- mixmodCluster(as.data.frame(x), nbCluster=2:6)
d@bestResult@partition
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
require(clValid)
require(clValid2)
require(clValid)
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/clValid2.R')
clValid2(geyser,4)
clValid2(geyser,4,clMethods = 'model')
cl <- clValid2(geyser,4,clMethods = 'model')
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/clValid2.R')
clValid2(as.matrix(geyser),4,clMethods = 'model')
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/clValid2.R')
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/clValid2.R')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
