plot(testLmmspline, y=2, smooth=TRUE)
# Don't keep the models to improve memory
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLmmspline <- lmmSpline(data=kidneySimTimeGroup$data[G1,],
time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1],keepModels=T)
plot(testLmmspline, y=2)
plot(testLmmspline, y=2, mean=TRUE)
# Don't keep the models to improve memory
lmm <<- lmmSpline(data=ExpData,sampleID=replicate, time=time, basis=isolate(input$BasisDE),keepModels = F)
data(kidneySimTimeGroup)
lmmsDEtestl1 <-lmmsDE(data=kidneySimTimeGroup$data,time=kidneySimTimeGroup$time,
sampleID=kidneySimTimeGroup$sampleID,
group=kidneySimTimeGroup$group,
experiment="longitudinal1",basis="p-spline",keepModels=T)
plot(lmmsDEtestl1,y=2,type="all")
plot(lmmsDEtestl1,y=2,type="time")
plot(lmmsDEtestl1,y=2,type="group")
plot(lmmsDEtestl1,y=2,type="group*time",smooth=TRUE)
data(kidneySimTimeGroup)
lmmsDEtestl1 <-lmmsDE(data=kidneySimTimeGroup$data,time=kidneySimTimeGroup$time,
sampleID=kidneySimTimeGroup$sampleID,
group=kidneySimTimeGroup$group,
experiment="longitudinal1",basis="p-spline",keepModels=T)
plot(lmmsDEtestl1,y=2,type="all")
plot(lmmsDEtestl1,y=2,type="time")
plot(lmmsDEtestl1,y=2,type="group")
plot(lmmsDEtestl1,y=2,type="group*time",smooth=F)
plot(lmmsDEtestl1,y=2,type="group*time",smooth=F,mean=F)
source('C:/Users/j.straube/Desktop/Dropbox/lmms/R/plot.lmmsde-method.R')
plot(lmmsDEtestl1,y=2,type="group*time",smooth=F,mean=F)
plot(lmmsDEtestl1,y=2,type="group*time",smooth=T,mean=F)
source('C:/Users/j.straube/Desktop/Dropbox/lmms/R/plot.lmmsde-method.R')
plot(lmmsDEtestl1,y=2,type="group*time",smooth=T,mean=F)
plot(lmmsDEtestl1,y=2,type="group*time",smooth=F,mean=F)
plot(lmmsDEtestl1,y=2,type="group*time",smooth=F,mean=T)
plot(lmmsDEtestl1,y=2,type="group*time",smooth=F,mean=F)
plot(testLmmspline, y=2, data=kidneySimTimeGroup$data[G1,], time=kidneySimTimeGroup$time[G1])
plot(testLmmspline, y=2, data=kidneySimTimeGroup$data[G1,], time=kidneySimTimeGroup$time[G1],smooth=T)
plot(testLmmspline, y=2, data=kidneySimTimeGroup$data[G1,], time=kidneySimTimeGroup$time[G1],mean=T)
plot(testLmmspline, y=2, data=kidneySimTimeGroup$data[G1,], time=kidneySimTimeGroup$time[G1],mean=T,smooth=T)
plot(lmmsDEtestl1,y=2,type="group*time",smooth=T,mean=T)
require(roxygen2)
roxygenize('../Desktop/Dropbox/lmms/')
install.packages('../Desktop/Dropbox/lmmPackage/lmmAugust/lmms.zip',repos=NULL,type='source')
require(lmms)
?"lmmSpline"
## Not run:
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLmmspline <- lmmSpline(data=kidneySimTimeGroup$data[G1,],
time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1],keepModels=T)
plot(testLmmspline, y=2)
plot(testLmmspline, y=2, smooth=TRUE)
# Don't keep the models to improve memory usage
testLmmspline <- lmmSpline(data=kidneySimTimeGroup$data[G1,],
time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1],keepModels=F)
#plot only the fitted values
plot(testLmmspline, y=2)
#plot fitted values with original data
plot(testLmmspline, y=2, data=kidneySimTimeGroup$data[G1,], time=kidneySimTimeGroup$time[G1])
install.packages('../Desktop/Dropbox/lmmPackage/lmmAugust/lmms.zip',repos=NULL,type='source')
library(lmms)
data(kidneySimTimeGroup)
# running for samples in group 1
G1 <- which(kidneySimTimeGroup$group=="G1")
testLmmspline <- lmmSpline(data=kidneySimTimeGroup$data[G1,],
time=kidneySimTimeGroup$time[G1],
sampleID=kidneySimTimeGroup$sampleID[G1],keepModels=T)
plot(testLmmspline, y=2)
plot(testLmmspline, y=2, smooth=TRUE)
?"lmmsDE"
data(kidneySimTimeGroup)
lmmsDEtestl1 <-lmmsDE(data=kidneySimTimeGroup$data,time=kidneySimTimeGroup$time,
sampleID=kidneySimTimeGroup$sampleID,
group=kidneySimTimeGroup$group,
experiment="longitudinal1",basis="p-spline",keepModels=T)
plot(lmmsDEtestl1,y=2,type="all")
plot(lmmsDEtestl1,y=2,type="time")
plot(lmmsDEtestl1,y=2,type="group")
plot(lmmsDEtestl1,y=2,type="group*time",smooth=TRUE)
#to save memory do not keep the models
lmmsDEtestl1 <-lmmsDE(data=kidneySimTimeGroup$data,time=kidneySimTimeGroup$time,
sampleID=kidneySimTimeGroup$sampleID,
group=kidneySimTimeGroup$group,
experiment="longitudinal1",basis="p-spline",keepModels=F)
# just the fitted trajectory
plot(lmmsDEtestl1,y=2,type="all")
plot(lmmsDEtestl1,y=2,type="all",data=kidneySimTimeGroup$data,time=kidneySimTimeGroup$time,
group=kidneySimTimeGroup$group)
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
collapse('b','c')
collapse(c('b','c'))
collapse(c('b','c'))
paste(c('b','c'))
paste(c('b','c'),collapse = '')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
require(GO.db)
require(annotate)
require(plyr)
library(AnnotationDbi)
??GO.db
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/BHI.R')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
library(Rmixmod)
?mixmodCluster
data(geyser)
## with default values
d <- mixmodCluster(geyser, nbCluster=2:6)
d@bestResult@partition
is.matrix(geyser)
is.data.frame(geyser)
?clara
x <- rbind(cbind(rnorm(200,0,8), rnorm(200,0,8)),
cbind(rnorm(300,50,8), rnorm(300,50,8)))
clarax <- clara(x, 2, samples=50)
clarax$clustering
d <- mixmodCluster(x, nbCluster=2:6)
d <- mixmodCluster(as.data.frame(x), nbCluster=2:6)
d@bestResult@partition
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
require(clValid)
require(clValid2)
require(clValid)
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/clValid2.R')
clValid2(geyser,4)
clValid2(geyser,4,clMethods = 'model')
cl <- clValid2(geyser,4,clMethods = 'model')
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/clValid2.R')
clValid2(as.matrix(geyser),4,clMethods = 'model')
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/clValid2.R')
source('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach/Scripts/clValid2.R')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('C:/Users/j.straube/Desktop/Dropbox/Shared_PhD_stuff/Shiny/UnifiedApproach')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
6812/12
citation('Rmixmod')
library(devtools)
install.packages("devtools")
library(devtools)
install.packages('curl')
library(devtools)
shiny::runApp('timeomics/TimeOmics')
ExampleExp <- read.table('../Documents/timeomics/TimeOmics/ExampleData/MultiSampleTwoGroups/Expression.csv',sep=',',header=T)
save.image("~/timeomics/TimeOmics/ExampleData/Example.RData")
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
ExampleGroup <- read.table('../Documents/timeomics/TimeOmics/ExampleData/MultiSampleTwoGroups/Group.csv',sep=',',header=F)
ExampleSample <- read.table('../Documents/timeomics/TimeOmics/ExampleData/MultiSampleTwoGroups/SampleIDs.csv',sep=',',header=F)
ExampleTime <- read.table('../Documents/timeomics/TimeOmics/ExampleData/MultiSampleTwoGroups/Time.csv',sep=',',header=F)
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
save.image("~/timeomics/TimeOmics/ExampleData/Example.RData")
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
F&F
F&T
T&T
>mixmodCluster()
?mixmodCluster()
data(geyser)
## with default values
mixmodCluster(geyser, nbCluster=2:6)
g <- geyser
g[1,2] <- NA
data(geyser)
## with default values
mixmodCluster(g, nbCluster=2:6)
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
which(c(1,2,3,4)==4)
rp <- na.omit(unique(c(1,1,1,1)))
rp[1]
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
source("https://bioconductor.org/biocLite.R")
biocLite("edge")
require('edge')
citation('edge')
?hclust
plot(log(1:10000))
load("C:/Users/j.straube/ownCloud/PhD2014/PaperData/BreastData.RData")
dim(inv.breast.rabs6)
dim(inv.breast.rabs6)
inv.breast.rabs6
dim(inv.data.breast)
dim(inv.data.breast$removed.row.index)
125+3427+30+2
125+3427+30+2/3586
c(125,3427,30,2)/3586
c(125,3427,30,2)/3584
c(205,1769,56,3)/2033
sum(c(205,1769,56,3))
0.3+0.96+0.008+0.0006
0.03+0.96+0.008+0.0006
0.35+0.96+0.008+0.0006
0.035+0.96+0.008+0.0006
0.035+0.96+0.008+0.0004
0.035+0.95+0.008+0.0004
c(3,3,10,17)/33
sum(c(3,3,10,17))
sum(c(205,1769,56,3))
sum(c(205,1769,56,3))/2033
c(205,1769,56,3)/2033
require(kohonen)
?kohonen
require(cluster)
citation(cluster)
citation('cluster')
citation('kohonen')
citation('Rmixmod')
citation('stats')
?kmeans
?hclust
shiny::runApp('timeomics/TimeOmics')
13443*0.65
13443*0.67
13443*0.33
5503*0.65
5503*0.66
5503*0.653
125+3427+30+2
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
group <<- as.character(GroupData()$data)
shiny::runApp('timeomics/TimeOmics')
ifelse(1==1,1,2)
shiny::runApp('timeomics/TimeOmics')
c(1,2,3,4)%in%c(1,2)
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
?"reactiveText"
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
require(reshape2)
?cast
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
acast(aqm, day ~ month ~ variable)
aqm$month
other.reshape.group <- function(Rep, Time, Data,Group){
lme.data<-NULL
#require(reshape)
if(sum(table(Rep,Time)>1)!=0)
stop('Make sure you have one time point per sample ID.')
lme.data <- data.frame(Time=Time,Rep=Rep,Group=Group,Data)
lme.data$Time = factor(drop.levels(lme.data$Time))
lme.data$Rep = factor(drop.levels(lme.data$Rep))
lme.data$Group = factor(drop.levels(lme.data$Group))
melt.lme.data <-NULL
# melt <- reshape2::melt
melt.lme.data <- melt(lme.data)
#melt.lme.data <- melt(lme.data)
cast.lme.data  <- NULL
#cast.lme.data <- cast(melt.lme.data, variable+ Group+Rep ~ Time)
cast.lme.data <- dcast(melt.lme.data, variable+ Group+Rep ~ Time)
melt.lme.data2 <- NULL
# melt.lme.data2 <-  melt(data.frame(cast.lme.data))
melt.lme.data2 <-  melt(data.frame(cast.lme.data))
names(melt.lme.data2) <- c("Molecule",  "Group","Rep", "Time", "Expr")
melt.lme.data2$Time <- factor(gsub("^X", "", as.character(melt.lme.data2$Time)))
return(as.data.frame(melt.lme.data2))
}
require(lmms)
?lmmsDE
lmmsDEtest <-other.reshape.group(data=kidneySimTimeGroup$data,time=kidneySimTimeGroup$time,
sampleID=kidneySimTimeGroup$sampleID,group=kidneySimTimeGroup$group)
d <-other.reshape.group(Data=kidneySimTimeGroup$data,Time=kidneySimTimeGroup$time,
Rep=kidneySimTimeGroup$sampleID,Group=kidneySimTimeGroup$group)
data(kidneySimTimeGroup)
d <-other.reshape.group(Data=kidneySimTimeGroup$data,Time=kidneySimTimeGroup$time,
Rep=kidneySimTimeGroup$sampleID,Group=kidneySimTimeGroup$group)
require(gdata)
d <-other.reshape.group(Data=kidneySimTimeGroup$data,Time=kidneySimTimeGroup$time,
Rep=kidneySimTimeGroup$sampleID,Group=kidneySimTimeGroup$group)
head(d)
d <-data.frame(Data=kidneySimTimeGroup$data,Time=kidneySimTimeGroup$time,
Rep=kidneySimTimeGroup$sampleID,Group=kidneySimTimeGroup$group)
melt(d)
md <- melt(d)
dc <-dcast(meltd, variable+ Group+Rep ~ Time)
dc <-dcast(md, variable+ Group+Rep ~ Time)
head(md)
head(d)
md <- melt(d)
d <-data.frame(Time=kidneySimTimeGroup$time,
Rep=kidneySimTimeGroup$sampleID,Group=kidneySimTimeGroup$group,kidneySimTimeGroup$data,)
d <-data.frame(Time=kidneySimTimeGroup$time,
Rep=kidneySimTimeGroup$sampleID,Group=kidneySimTimeGroup$group,kidneySimTimeGroup$data)
md <- melt(d)
dim(md)
d <-data.frame(Time=factor(kidneySimTimeGroup$time),
Rep=kidneySimTimeGroup$sampleID,Group=kidneySimTimeGroup$group,kidneySimTimeGroup$data)
md <- melt(d)
dim(md)
dc <-dcast(md, variable+ Group+Rep ~ Time)
dim(dc)
head(dc)
md <- melt(dc~Group)
md <- melt(dc)
head(md)
md <- melt(d)
dc <-dcast(md, value+Group)
dc <-dcast(md, Group)
dc <-dcast(md, ~Group)
dc <-dcast(md, variable~Group)
dc <-dcast(md, variable+Group)
dc <-dcast(md, variable+Group)
dc <-dcast(md, variable~Group)
head(dc)
l <- splt(d,d$Group)
l <- split(d,d$Group)
head(l)
dim(l[[1]])
dim(l[[2]])
table(d$Group)
l <- list()
l['a'] <- 'a'
l
l['b']
l['b'] <- 'a'
l['b']
?lmmSpline
?lmmspline
??lmmspline
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
?rbind
content = function(file) {
shiny::runApp('timeomics/TimeOmics')
}
shiny::runApp('timeomics/TimeOmics')
l
names(l)
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
l
l[1]
l[[1]]
i <- 1
l[[i]]
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
grep('^IPI','IPI1')
grep('^IPI','1IPI')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
?renderText
shiny::runApp('timeomics/TimeOmics')
T==NULL
T==0
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
remove.packages('lmms')
remove.packages('lmms')
install.packages('../Desktop/Dropbox/lmmPackage/lmmSeptember/lmms.zip',repos=NULL,type='source')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics/TimeOmics')
shiny::runApp('timeomics_development_branch/TimeOmics')
shiny::runApp('timeomics_development_branch/TimeOmics')
shiny::runApp('timeomics_development_branch/TimeOmics')
shiny::runApp('timeomics_development_branch/TimeOmics')
shiny::runApp('timeomics_development_branch/TimeOmics')
shiny::runApp('timeomics_development_branch/TimeOmics')
shiny::runApp('timeomics_development_branch/TimeOmics')
shiny::runApp('timeomics_development_branch/TimeOmics')
shiny::runApp('timeomics_development_branch/TimeOmics')
shiny::runApp('timeomics_development_branch/TimeOmics')
require(devtools)
install.packages('curl')
require(devtools)
devtools::install_bitbucket('Jasmin87/lmms')
devtools::install_bitbucket('Jasmin87/lmms')
>install_bitbucket()
?install_bitbucket
ddevtools::
?devtools
devtools::install_bitbucket('Jasmin87/lmms')
devtools::install_bitbucket('Jasmin87/lmms')
devtools::install_bitbucket('Jasmin87/lmms')
devtools::install_bitbucket('Jasmin87/lmms')
devtools::install_bitbucket('Jasmin87/lmms')
remove.packages(lmms)
remove.packages('lmms')
shiny::runApp('timeomics_development_branch/TimeOmics')
shiny::runApp('timeomics_development_branch/TimeOmics')
colnames(combined_datao[,5:50])
load("C:/Users/j.straube/ownCloud/For_Jasmin/LogData.RData")
rremove.packages('lmms')
remove.packages('lmms')
remove.packages('ggplot2')
remove.packages('org.Hs.eg.db')
remove.packages('googleVis')
remove.packages( c("shiny", "shinydashboard",'cluster','kohonen','Rmixmod','ggplot2','googleVis','DT','mclust','devtools'))
require(lmms)
?lmms
rremove.packages('lmms')
remove.packages('lmms')
if (!require(lmms)){
devtools::install_bitbucket('Jasmin87/lmms')
}
require(lmms)
?lmms
?lmms
require(lmms)
source('global.R',encoding = 'UTF-8')
?source
shiny::runApp('timeomics_development_branch/TimeOmics')
shiny::runApp('timeomics_development_branch/TimeOmics')
shiny::runApp('timeomics_development_branch/TimeOmics')
